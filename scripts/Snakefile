configfile: "parameters.yaml"

rule all:
	input:
		f"{config['OUTPUT_DIR']}/{config['OUTPUT_TIME_NAME']}",
		f"{config['OUTPUT_DIR']}/{config['OUTPUT_SIZE_NAME']}"
	threads:
		config["NUM_THREADS"]


rule check_output_dir:
	output:
		temp(touch('output_checked'))
	log:
		"log/check_paths.log"
	params:
		OUTPUT_DIR = config["OUTPUT_DIR"]
	shell:
		"""
		(if ! [[ -d {params.OUTPUT_DIR} ]]; then
			echo "Directory {params.OUTPUT_DIR} does not exist. Exiting."
			exit 1
		fi 
		echo "[$(date +"%Y-%m-%d %T")] Output directory {params.OUTPUT_DIR} exists."
		) &>> {log}
		"""


rule check_raptor_binary:
	output:
		temp(touch('raptor_binary_checked'))
	log:
		"log/check_paths.log"
	params:
		RAPTOR_BINARY = config["RAPTOR_BINARY"]
	shell:
		"""
		(if ! [[ -s {params.RAPTOR_BINARY} ]]; then
			echo "Executable {params.RAPTOR_BINARY} does not exist. Exiting."
			exit 1
		fi
		if ! {params.RAPTOR_BINARY} --help &> /dev/null; then
			echo "Executable {params.RAPTOR_BINARY} cannot be run. Exiting."
			exit 1
		fi
		echo "[$(date +"%Y-%m-%d %T")] Raptor binary {params.RAPTOR_BINARY} looks good." 
		) &>> {log}
		"""


rule check_input_files:
	output:
		temp(touch('input_file_checked'))
	log:
		"log/check_paths.log"
	params:
		FILENAMES_FILE=config['FILENAMES_FILE'],
		QUERY_FILE=config['QUERY_FILE'],
	shell:
		"""
		(if ! [[ -s {params.FILENAMES_FILE} ]]; then
			echo "Filenames file {params.FILENAMES_FILE} does not exist or is empty. Exiting."
			exit 1
		fi
		if ! [[ -s {params.QUERY_FILE} ]]; then
			echo "Query file {params.QUERY_FILE} does not exist or is empty. Exiting."
			exit 1
		fi
		echo "[$(date +"%Y-%m-%d %T")] Input files look good."
		) &>> {log}
		"""



rule display_layout_binary_check:
	output:
		temp(touch('display_layout_binary_checked'))
	log:
		"log/check_paths.log"
	params:
		DISPLAY_LAYOUT_BINARY = config["DISPLAY_LAYOUT_BINARY"]
	shell:
		"""
		(if ! [[ -s {params.DISPLAY_LAYOUT_BINARY} ]]; then
			echo "Executable {params.DISPLAY_LAYOUT_BINARY} does not exist. Exiting."
			exit 1
		fi

		if ! {params.DISPLAY_LAYOUT_BINARY} --help &> /dev/null; then
			echo "Executable {params.DISPLAY_LAYOUT_BINARY} cannot be run. Exiting."
			exit 1
		fi
		echo "[$(date +"%Y-%m-%d %T")] Display layout binary {params.DISPLAY_LAYOUT_BINARY} looks good."
		) &>> {log}
		"""

rule raptor_layout:
	input:
		"raptor_binary_checked",
		"input_file_checked",
	output:
		LAYOUT_FILE = 'build/{key}={param}/layout',
		LAYOUT_TIME = 'build/{key}={param}/layout.time'
	threads:
		config["NUM_THREADS"]
	log:
		"log/raptor_layout_{key}_{param}.log"
	params:
		RAPTOR_BINARY = config["RAPTOR_BINARY"],
		FILENAMES_FILE = config['FILENAMES_FILE'],
		KMER = config["DEFAULT_PARAMS"]["KMER_SIZE"],
		WINDOW_SIZE = config["DEFAULT_PARAMS"]["WINDOW_SIZE"],
		T_MAX = config["DEFAULT_PARAMS"]["T_MAX"],
		R_FPR = config["DEFAULT_PARAMS"]["R_FPR"],
		NUM_HASHES = config["DEFAULT_PARAMS"]["NUM_HASHES"],
		MAXIMUM_FPR = config["DEFAULT_PARAMS"]["M_FPR"],
		ALPHA = config["DEFAULT_PARAMS"]["ALPHA"],
	shell:
		"""
		(kmer=$([[ {wildcards.key} == "kmer" ]] && echo {wildcards.param} || echo {params.KMER})
		tmax=$([[ {wildcards.key} == "tmax" ]] && echo {wildcards.param} || echo {params.T_MAX})
		hash=$([[ {wildcards.key} == "hash" ]] && echo {wildcards.param} || echo {params.NUM_HASHES})
		relaxed_fpr=$([[ {wildcards.key} == "r-relaxed" ]] && echo {wildcards.param} | sed 's/_/./g' || echo {params.R_FPR})
		alpha=$([[ {wildcards.key} == "alpha" ]] && echo {wildcards.param} | sed 's/_/./g' || echo {params.ALPHA})
		echo "[$(date +"%Y-%m-%d %T")] Running raptor layout for {wildcards.key}={wildcards.param}."
		{params.RAPTOR_BINARY} layout \
			--input {params.FILENAMES_FILE} \
			--output {output.LAYOUT_FILE} \
			--kmer $kmer \
			--window {params.WINDOW_SIZE} \
			--tmax $tmax \
			--fpr {params.MAXIMUM_FPR} \
			--relaxed-fpr $relaxed_fpr \
			--hash $hash \
			--disable-estimate-union \
			--disable-rearrangement \
			--alpha $alpha \
			--max-rearrangement-ratio 0.5 \
			--sketch-bits 12 \
			--timing-output {output.LAYOUT_TIME} \
			--threads {threads}
		) &>> {log}
		"""


rule raptor_build:
	input:
		"raptor_binary_checked",
		LAYOUT_FILE = 'build/{key}={param}/layout'
	output:
		INDEX_FILE = 'build/{key}={param}/index',
		INDEX_TIME = 'build/{key}={param}/index.time'
	threads:
		config["NUM_THREADS"]
	log:
		"log/raptor_build_{key}_{param}.log"
	params:
		RAPTOR_BINARY = config["RAPTOR_BINARY"],
		WINDOW_SIZE = config["DEFAULT_PARAMS"]["WINDOW_SIZE"],
	shell:
		"""
		(echo "[$(date +"%Y-%m-%d %T")] Running raptor build for {wildcards.key}={wildcards.param}."
		{params.RAPTOR_BINARY} build \
			--input {input.LAYOUT_FILE} \
			--output {output.INDEX_FILE} \
			--window {params.WINDOW_SIZE} \
			--quiet \
			--timing-output {output.INDEX_TIME} \
			--threads {threads}
		) &>> {log}
		"""


rule raptor_search:
	input:
		"raptor_binary_checked",
		"input_file_checked",
		INDEX_FILE = 'build/{key}={param}/index'
	output:
		RESULT_FILE = 'build/{key}={param}/out',
		RESULT_TIME = 'build/{key}={param}/out.time'
	threads:
		config["NUM_THREADS"]
	log:
		"log/raptor_search_{key}_{param}.log"
	params:
		RAPTOR_BINARY = config["RAPTOR_BINARY"],
		QUERY_FILE = config["QUERY_FILE"],
		QUERY_ERRORS = config["DATA_PARAMETERS"]["QUERY_ERRORS"],
		QUERY_LENGTH = config["DATA_PARAMETERS"]["QUERY_LENGTH"],
	shell:
		"""
		(echo "[$(date +"%Y-%m-%d %T")] Running raptor search for {wildcards.key}={wildcards.param}."
		{params.RAPTOR_BINARY} search \
			--index {input.INDEX_FILE} \
			--query {params.QUERY_FILE} \
			--output {output.RESULT_FILE} \
			--error {params.QUERY_ERRORS} \
			--query_length {params.QUERY_LENGTH} \
			--quiet \
			--timing-output {output.RESULT_TIME} \
			--threads {threads}
		) &>> {log}
		"""


rule display_layout:
	input:
		"display_layout_binary_checked",
		LAYOUT_FILE = 'build/{key}={param}/layout'
	output:
		SIZE_FILE = "build/{key}={param}/sizes"
	threads:
		config["NUM_THREADS"]
	log:
		"log/display_layout_{key}_{param}.log"
	params:
		DISPLAY_LAYOUT_BINARY = config["DISPLAY_LAYOUT_BINARY"],
		WINDOW_SIZE = config["DEFAULT_PARAMS"]["WINDOW_SIZE"],
	shell:
		"""
		(echo "[$(date +"%Y-%m-%d %T")] Running display_layout for {wildcards.key}={wildcards.param}."
		{params.DISPLAY_LAYOUT_BINARY} sizes \
			--input {input.LAYOUT_FILE} \
			--output {output.SIZE_FILE} \
			--threads {threads}
		) &>> {log}
		"""	


rule store_timings:
	input:
		"output_checked",
		files = expand('build/{param}/out.time',
			param = [f"alpha={str(param).replace('.', '_')}" for param in config["PARAMS"]["ALPHA"]] +
					[f"tmax={param}" for param in config["PARAMS"]["T_MAX"]] +
					[f"hash={param}" for param in config["PARAMS"]["NUM_HASHES"]] +
					[f"kmer={param}" for param in config["PARAMS"]["KMER_SIZE"]] +
					[f"relaxed-fpr={str(param).replace('.', '_')}" for param in config["PARAMS"]["RELAXED_FPR"]])
	output:
		f"{config['OUTPUT_DIR']}/{config['OUTPUT_TIME_NAME']}"
	threads:
		config["NUM_THREADS"]
	log:
		"log/store_timings.log"
	shell:
		"""
		(echo "[$(date +"%Y-%m-%d %T")] Storing timings."
		Rscript summarize_results.r {output} {input.files}
		) &>> {log}
		"""


rule store_sizes:
	input:
		"output_checked",
		files = expand('build/{param}/sizes',
			param = [f"alpha={str(param).replace('.', '_')}" for param in config["PARAMS"]["ALPHA"]] +
					[f"tmax={param}" for param in config["PARAMS"]["T_MAX"]] +
					[f"hash={param}" for param in config["PARAMS"]["NUM_HASHES"]] +
					[f"kmer={param}" for param in config["PARAMS"]["KMER_SIZE"]] +
					[f"relaxed-fpr={str(param).replace('.', '_')}" for param in config["PARAMS"]["RELAXED_FPR"]])
	output:
		f"{config['OUTPUT_DIR']}/{config['OUTPUT_SIZE_NAME']}"
	threads:
		config["NUM_THREADS"]
	log:
		"log/store_sizes.log"
	shell:
		"""
		(echo "[$(date +"%Y-%m-%d %T")] Storing sizes."
		Rscript summarize_results.r {output} {input.files}
		) &>> {log}
		"""